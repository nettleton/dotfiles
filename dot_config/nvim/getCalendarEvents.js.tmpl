{{- if (not (eq .targetname "nessie") ) -}}
const { exec } = require('child_process')
const fs = require('fs')
const os = require('os')
const https = require('https')

const args = process.argv.slice(2)

const isoNow = new Date().toISOString()
const iso1D = new Date(new Date().getTime() + 60*60*24*1000).toISOString()

const startDate = args.length > 0 ? args[0] : isoNow
const endDate = args.length > 1 ? args[1] : iso1D

console.log(`Getting calendar events for duration ${startDate} - ${endDate}`)

const lightsOnByDefault = os.hostname() === "starship"

function alfredScriptFilterMods(vars) {

  var mods = {
    cmd: {
      subtitle: "Note Only",
      variables: {lightsOn: false, joinVideo: false, noteType: vars.noteType, videoconferenceUrls: vars.videoconferenceUrls, referenceUrls: vars.referenceUrls, noteFilename: vars.noteFilename}
    },
    alt: {
      subtitle: lightsOnByDefault ? "Note & Video Only" : "Force Lights On",
      variables: {lightsOn: !lightsOnByDefault, joinVideo: true, noteType: vars.noteType, videoconferenceUrls: vars.videoconferenceUrls, referenceUrls: vars.referenceUrls, noteFilename: vars.noteFilename}
    }
  }
  return mods
}


async function getJoke () {
  const url = 'https://icanhazdadjoke.com'
  const opts = {
    headers: {
      Accept: 'text/plain',
      'User-Agent': 'vimwiki helper (https://github.com/nettleton/dotfiles)'
    }
  }

  return new Promise((resolve) => {
    let data = ''
    https.get(url, opts, (res) => {
      res.on('data', chunk => { data += chunk })
      res.on('end', () => resolve(data))
    })
  })
}

// exec(`/usr/local/bin/icalBuddy -ic "Calendar" -ea -npn -stda -ss "##EVENT_DELIMITER##" -b "" -po "title,datetime,attendees,notes" -iep "title,datetime,attendees,notes" -df "%Y-%m-%d" -tf "%H:%M:%S" -ps "|!!PROP_SEPARATOR!!|" -nnr "##NEWLINE##" eventsFrom:"${daystr} 00:00:00 -0500" to:"${daystr} 23:59:59 -0500"`, { shell: '/bin/bash' }, (error, stdout, stderr) => {
exec(`~/sandbox/swiftCalBuddy/.build/release/swiftCalBuddy --excludeStatuses canceled -nrd -df "YYYY-MM-dd" -tf "HH:mm" -ea -fj -ic "Calendar" --referenceUrlExcludedPaths ".one,Using a Microsoft Teams Room.aspx" --excludeTitles "OOO,^(?:CNCF |ET |Observability )?work[ ]*\$,CNCF End User,Commute,SGD update,Backlog grooming,Sprint planning,OPDRx,Dashboard review,RTM,golf,busy,^Placeholder*" eventsFrom ${startDate} ${endDate}`, (error, stdout, stderr) => {
  if (error) {
    console.error(`stderr: ${stderr}`)
    console.error(`exec error: ${error}`)
    return
  }

  const events = JSON.parse(stdout).map(event => {
    // console.log("=============================")

    event.title = event.title.replace(/ \(\w*\)$/i, '').replace(/[^A-Z0-9-]/ig, "-").trim()
    event.fullAttendeeList = [...new Set(event.attendees.concat(event.organizer))].filter(a => {
      return !a.includes('-FL') && !a.includes('Joshua Wang') && a.length > 0
    }).map(s => s.trim())

    var trimmedNotes = event.notes.replace(/[\r\n]+/g, '##NL##') // replace newline characters in notes field with placeholder

    // trim remainder of unnecessary text from notes frontmatter
    trimmedNotes = trimmedNotes.replace(/_____+.*/g,'')        // videoconference invites are at the end of the notes and start with \n__..._\nJoin Teams Meeting
    trimmedNotes = trimmedNotes.replace(/\[https:\/\/.*.cdn.office.net.*\.png\]/g,'') //Outlook inserts images for office docs
    trimmedNotes = trimmedNotes.replace(/\[.* icon\]/g, '') //images for office docs
    trimmedNotes = trimmedNotes.replace(/<.*>/g, '') // some url hyperlinks
    trimmedNotes = trimmedNotes.replace(/##NL##Thanks,.*/g,'')   // signature lines
    trimmedNotes = trimmedNotes.replace(/##NL##https:\/\/{{ .work.companyname }}-my.sharepoint.com\/:o:\/[p|r][\/personal]*\/{{ .work.user }}.*/g,'') // my 1:1s have a personal onedrive link
    trimmedNotes = trimmedNotes.replace(/Instructions for 1:1 Notes.*/g,'')
    trimmedNotes = trimmedNotes.replace(/Join Zoom Meeting.*/g, '')
    event.shortNotes = trimmedNotes

    return event
  })

  const eventsAndFileNames = events.map(nEvent => {
    const startTimeHM = nEvent.startDate.split(':').slice(0, 2).join('').split(' ').join('-')
    const shortfn = `${startTimeHM}-${nEvent.title.replace(/\s|#/g, '-').replace(/\//g, '-').replace(/"/g, '').replace(/:/g, '-').replace(/\(|\)/g, '').replace(/--+/g,'-')}`
    nEvent.shortfn = shortfn
    const filename = `~/Documents/notes/default/diary/${shortfn}.md`
    nEvent.diaryFilename = filename
    nEvent.uid = filename
    nEvent.title = shortfn
    nEvent.type = 'file'
    nEvent.subtitle = filename
    nEvent.arg = filename
    nEvent.icon = { type: 'fileicon', path: '/System/Applications/Calendar.app' }

    const protocolConvertedVideoUrls = nEvent.videoconferenceUrls.map(vcUrl => {
      // can't use URL because https is a 'Special' protocol according to the WHATWG URL Standard
      if (vcUrl.startsWith("https://teams.microsoft.com")) {
        return vcUrl.replace(/https:/, 'msteams:')
      }
      return vcUrl
    })
    nEvent.variables = { videoconferenceUrls: protocolConvertedVideoUrls.join("!"), referenceUrls: nEvent.referenceUrls.join("!"), noteType: 'existing', noteFilename: filename, lightsOn: lightsOnByDefault, joinVideo: true }
    nEvent.mods = alfredScriptFilterMods(nEvent.variables)

    nEvent.match = shortfn.replace(/[^a-z0-9]/gi, ' ')
    return nEvent
  })

  eventsAndFileNames.forEach(noteEvent => {
    const noteAttendeesLinks = noteEvent.fullAttendeeList.map(a => `[${a}](../${a.replace(/\s/g,'-')})`)

    getJoke().then(joke => {
      var body = `---\nTitle:        diary/${noteEvent.shortfn}\nAuthor:       Joshua Wang\nDate:         ${noteEvent.startDate} - ${noteEvent.endDate}\nComment:      \nTags:         \nSnippet:   \nAttendees:    ${noteAttendeesLinks.join(', ')}\nInvite: ${noteEvent.shortNotes}\nVideoconference:    \n`
      for (const videoconferenceUrl of noteEvent.videoconferenceUrls) {
        const parsedUrl = new URL(videoconferenceUrl)
        const host = parsedUrl.host
        body += `    - [${host}](${videoconferenceUrl})\n`
      }
      body += `Resources:\n`
      for (const referenceUrl of noteEvent.referenceUrls) {
        const parsedUrl = new URL(referenceUrl)
        const pathParts = parsedUrl.pathname.split('/')
        const lastPath = pathParts[pathParts.length - 1]

        const queryParams = parsedUrl.searchParams

        if (parsedUrl.host.startsWith("komodo") && queryParams.get('Record')) { // gecko
          body += `    - [g${queryParams.get('Record')}](${referenceUrl})\n`
        } else if (lastPath.includes("viewpage.action") && queryParams.get('pageId')) { // some confluence links
          body += `    - [${queryParams.get('pageId')}](${referenceUrl})\n`
        } else if (!lastPath) {
          body += `    - [${parsedUrl.host}](${referenceUrl})\n`
        } else {
          body += `    - [${lastPath}](${referenceUrl})\n`
        }
      }
      body += `Wisdom: ${joke}\n---\n\n`
      fs.stat(noteEvent.diaryFilename, (err, stat) => {
        if (err == null) {
          console.log(`${noteEvent.diaryFilename} exists, not recreating`)
        } else if (err.code === 'ENOENT') {
          console.log(`Creating ${noteEvent.diaryFilename}`)
          fs.writeFile(noteEvent.diaryFilename.replace("~",`${os.homedir}`), body, (err) => {
            if (err) {
              console.error(err)
            } else {
              console.log(`Written ${noteEvent.diaryFilename}`)
            }
          })
        } else {
          console.log(`Unexpected error: ${err.code}`)
        }
      })
    })
  })

  // map into Alfred JSON object
  var newNonDiary = { uid: 'new', title: 'Create new note', type: 'default', subtitle: 'Create a new non-diary note', arg: '', icon: { type: 'fileicon', path: '~/Documents/notes/default/index.md' }, variables: { videoconferenceUrls: [], referenceUrls: [], noteType: 'new', noteFilename: `~/Documents/notes/default/`, lightsOn: lightsOnByDefault, joinVideo: true }}
  newNonDiary.mods = alfredScriptFilterMods(newNonDiary.variables)

  const today = new Date()

  const month = `${today.getMonth()}`.padStart(2,'0')
  const day = `${today.getDate()}`.padStart(2,'0')
  const hour = `${today.getHours()}`.padStart(2,'0')
  const min = `${today.getMinutes()}`.padStart(2,'0')
  const daystr = `${today.getFullYear()}-${month}-${day}-${hour}${min}`

  var newDiary = { uid: 'new', title: 'Create new diary note', type: 'default', subtitle: 'Create a new diary note', arg: '', icon: { type: 'fileicon', path: '~/Documents/notes/default/index.md' }, variables: { videoconferenceUrls: [], referenceUrls: [], noteType: 'newDiary', noteFilename: `~/Documents/notes/default/diary/${daystr}-`, lightsOn: lightsOnByDefault, joinVideo: true }}
  newDiary.mods = alfredScriptFilterMods(newDiary.variables)
  var generateDaysNotes = { uid: 'generateToday', title: 'Generate today\'s notes', type: 'default', subtitle: 'Generate placeholders for today\'s meetings', arg: '', icon: { type: 'fileicon', path: '/Applications/Kitty.app' }, variables: { videoconferenceUrls: [], referenceUrls: [], noteType: 'genToday', noteFilename: '', lightsOn: lightsOnByDefault, joinVideo: true }}
  generateDaysNotes.mods = alfredScriptFilterMods(generateDaysNotes.variables)
  var cleanupOldNotes = { uid: 'cleanup', title: 'Cleanup', type: 'default', subtitle: 'Cleanup old and empty notes', arg: '', icon: { type: 'fileicon', path: '/Applications/Kitty.app' }, variables: { videoconferenceUrls: [], referenceUrls: [], noteType: 'cleanup', noteFilename: '', lightsOn: lightsOnByDefault, joinVideo: true }}
  cleanupOldNotes.mods = alfredScriptFilterMods(cleanupOldNotes.variables)

  eventsAndFileNames.push(newNonDiary)
  eventsAndFileNames.push(newDiary)
  eventsAndFileNames.push(generateDaysNotes)
  eventsAndFileNames.push(cleanupOldNotes)

  const alfredScriptFilterObj = { items: eventsAndFileNames }
  fs.writeFile(`${os.homedir}/Documents/notes/default/diary/alfred.json`, JSON.stringify(alfredScriptFilterObj), (err) => {
    if (err) {
      console.error(err)
    } else {
      console.log(`Wrote alfred script filter to ${os.homedir}/Documents/notes/default/diary/alfred.json`)
    }
  })

  exec('fish -c "generateDiaryIndex"', (error, stdout, stderr) => {
    if (error) {
      console.error(error)
      console.error('-----------------')
      console.error(stderr)
    } else {
      console.log(stdout)
      console.log('Generated new diary index')
    }
  })
})
{{- end -}}
