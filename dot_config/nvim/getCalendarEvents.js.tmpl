const { exec } = require('child_process')
const fs = require('fs')
const os = require('os')
const https = require('https')

const args = process.argv.slice(2)

const today = new Date().toISOString().replace(/T.*/, '')
const daystr = args.length > 0 ? args[0] : `${today}`
console.log(`Getting calendar events for ${daystr}`)

async function getJoke () {
  const url = 'https://icanhazdadjoke.com'
  const opts = {
    headers: {
      Accept: 'text/plain',
      'User-Agent': 'vimwiki helper (https://gitlab.com/nettleton/dotfiles)'
    }
  }

  return new Promise((resolve) => {
    let data = ''
    https.get(url, opts, (res) => {
      res.on('data', chunk => { data += chunk })
      res.on('end', () => resolve(data))
    })
  })
}

// exec(`/usr/local/bin/icalBuddy -ic "Calendar" -ea -npn -stda -ss "##EVENT_DELIMITER##" -b "" -po "title,datetime,attendees,notes" -iep "title,datetime,attendees,notes" -df "%Y-%m-%d" -tf "%H:%M:%S" -ps "|!!PROP_SEPARATOR!!|" -nnr "##NEWLINE##" eventsFrom:"${daystr} 00:00:00 -0500" to:"${daystr} 23:59:59 -0500"`, { shell: '/bin/bash' }, (error, stdout, stderr) => {
exec('~/sandbox/swiftCalBuddy/.build/release/swiftCalBuddy -fj -ic "Calendar"', (error, stdout, stderr) => {
  if (error) {
    console.error(`stderr: ${stderr}`)
    console.error(`exec error: ${error}`)
    return
  }

  const events = JSON.parse(stdout).map(event => {
    // console.log("=============================")

    event.title = event.title.replace(/ \(\w*\)$/i, '').trim()
    event.fullAttendeeList = event.attendees.concat(event.organizer).filter(a => {
      return !a.includes('-FL') && !a.includes('Joshua Wang') && a.length > 0
    }).map(s => s.trim().replace(/\s/g, '_'))

    var trimmedNotes = event.notes.replace(/[\r\n]+/g, '##NL##') // replace newline characters in notes field with placeholder

    const teamsUrlMatch = trimmedNotes.match(/https:\/\/teams.microsoft.com\/l\/meetup-join[^\s>]*/)
    event.teamsUrl = teamsUrlMatch ? teamsUrlMatch[0] : ''
    const oneNoteUrlMatch = trimmedNotes.match(/https:\/\/***REMOVED***-my.sharepoint.com[^>#]*/)
    let oneNoteUrl = oneNoteUrlMatch ? oneNoteUrlMatch[0] : ''
    if (oneNoteUrl.includes('Christina')) {
      oneNoteUrl = '{{ range (index (onepassword "fcww6q4a5bhnff4zcw7biwfvj4").details.sections 2 "fields") -}}
  {{ if eq .t "special_one_note_url" -}}
    {{ .v }}
  {{- end }}
{{- end }}'
    }
    event.oneNoteUrl = oneNoteUrl

    const confluenceUrlMatch = trimmedNotes.match(/https:\/\/confluence[^\s>#]*/)
    event.confluenceUrl = confluenceUrlMatch ? confluenceUrlMatch[0] : ''

    // trim remainder of unnecessary text from notes frontmatter
    trimmedNotes = trimmedNotes.replace(/##NL##_+.*/g,'')        // videoconference invites are at the end of the notes and start with \n__..._\nJoin Teams Meeting
    trimmedNotes = trimmedNotes.replace(/\[https:\/\/.*.cdn.office.net.*\.png\]/g,'') //Outlook inserts images for office docs
    trimmedNotes = trimmedNotes.replace(/##NL##Thanks,.*/g,'')   // signature lines
    trimmedNotes = trimmedNotes.replace(/##NL##https:\/\/***REMOVED***-my.sharepoint.com\/:o:\/[p|r][\/personal]*\/joshuaw.*/g,'') // my 1:1s have a personal onedrive link
    event.shortNotes = trimmedNotes

    return event
  })

  const eventsToCreateNotesFrom = events.filter(calendarEvent => {
    const invalidTitles = [/.*OOO.*/, /Canceled:.*/i, /.*Backlog grooming/i, /.*Sprint planning.*/i, /.*scrum.*/i, /CR 1-on-1/, /YL 1:1/, /Gremlin Customer Office Hours/, /work$/, /Observability work$/, /CNCF work/, /Online Learning Architecture Meeting/, /OPDRx/, /Dashboard review/i, /reminder/i, /RTM/, /golf/i, /busy/]

    const invalidTitleMatches = invalidTitles.filter(rex => calendarEvent.title.match(rex))
    const anyInvalidTitles = invalidTitleMatches && invalidTitleMatches.length > 0

    return !anyInvalidTitles
  })

  const eventsAndFileNames = eventsToCreateNotesFrom.map(nEvent => {
    const startTimeHM = nEvent.startDate.split(':').slice(0, 2).join('').split(' ').join('_')
    const shortfn = `${startTimeHM}_${nEvent.title.replace(/\s|#/g, '_').replace(/\//g, '-').replace(/"/g, '').replace(/:/g, '-').replace(/\(|\)/g, '')}`
    nEvent.shortfn = shortfn
    const filename = `${os.homedir}/Documents/notes/default/diary/${shortfn}.md`
    nEvent.diaryFilename = filename
    nEvent.uid = filename
    nEvent.title = shortfn
    nEvent.type = 'file'
    nEvent.subtitle = filename
    nEvent.arg = filename
    nEvent.icon = { path: 'calendar.png' }

    nEvent.variables = { teamsUrl: nEvent.teamsUrl.replace(/https:/, 'msteams:'), oneNoteUrl: nEvent.oneNoteUrl, noteType: 'existing', noteFilename: filename, confluenceUrl: nEvent.confluenceUrl }

    if (nEvent.fullAttendeeList.length === 1) {
      nEvent.variables.attendees = `${os.homedir}/Documents/notes/default/${nEvent.fullAttendeeList[0]}.md`
    }

    nEvent.match = shortfn.replace(/[^a-z0-9]/gi, ' ')
    return nEvent
  })

  eventsAndFileNames.forEach(noteEvent => {
    // TODO: fix tags
    const teamsUrlLink = noteEvent.teamsUrl.length > 0 ? `[Join Teams Meeting](${noteEvent.teamsUrl})` : ''
    const oneNoteUrlLink = noteEvent.oneNoteUrl.length > 0 ? `[Open Notebook](${noteEvent.oneNoteUrl})` : ''
    const confluenceUrlLink = noteEvent.confluenceUrl.length > 0 ? `[Open Confluence Page](${noteEvent.confluenceUrl})` : ''
    const noteAttendeesLinks = noteEvent.fullAttendeeList.map(a => `[${a}](../${a}.md)`)

    getJoke().then(joke => {
      // console.log(joke)

      const body = `---\nTitle:        diary/${noteEvent.shortfn}\nAuthor:       Joshua Wang\nDate:         ${daystr} ${noteEvent.startDate} - ${noteEvent.endDate}\nComment:      \nTags:         \nAttendees:    ${noteAttendeesLinks.join(', ')}\nInvite Notes: ${noteEvent.shortNotes}\nTeams URL:    ${teamsUrlLink}\nOneNote URL:  ${oneNoteUrlLink}\nConfluence URL: ${confluenceUrlLink}\nWords of Wisdom: ${joke}\n---\n\n`
      // console.log(body)
      fs.stat(noteEvent.diaryFilename, (err, stat) => {
        if (err == null) {
          console.log(`${noteEvent.diaryFilename} exists, not recreating`)
        } else if (err.code === 'ENOENT') {
          console.log(`Creating ${noteEvent.diaryFilename}`)
          fs.writeFile(noteEvent.diaryFilename, body, (err) => {
            if (err) {
              console.error(err)
            } else {
              console.log(`Written ${noteEvent.diaryFilename}`)
            }
          })
        } else {
          console.log(`Unexpected error: ${err.code}`)
        }
      })
    })
  })

  // map into Alfred JSON object
  const newNonDiary = { uid: 'new', title: 'Create new note', type: 'default', subtitle: 'Create a new non-diary note', arg: '', icon: { type: 'fileicon', path: '~/Documents/notes/default/index.md' }, variables: { teamsUrl: '', oneNoteUrl: '', noteType: 'new', noteFilename: `${os.homedir}/Documents/notes/default/` } }
  const newDiary = { uid: 'new', title: 'Create new diary note', type: 'default', subtitle: 'Create a new diary note', arg: '', icon: { type: 'fileicon', path: '~/Documents/notes/default/index.md' }, variables: { teamsUrl: '', oneNoteUrl: '', noteType: 'newDiary', noteFilename: `${os.homedir}/Documents/notes/default/diary/${daystr}_` } }
  const generateDaysNotes = { uid: 'generateToday', title: 'Generate today\'s notes', type: 'default', subtitle: 'Generate placeholders for today\'s meetings', arg: '', icon: { type: 'fileicon', path: '~/sandbox/dotfiles/vim/vimwiki-helpers/getCalendarEvents.js' }, variables: { teamsUrl: '', oneNoteUrl: '', noteType: 'genToday', noteFilename: '' } }
  const cleanupOldNotes = { uid: 'cleanup', title: 'Cleanup', type: 'default', subtitle: 'Cleanup old and empty notes', arg: '', icon: { type: 'fileicon', path: '~/sandbox/dotfiles/vim/vimwiki-helpers/cleanOldNotes.sh' }, variables: { teamsUrl: '', oneNoteUrl: '', noteType: 'cleanup', noteFilename: '' } }

  eventsAndFileNames.push(newNonDiary)
  eventsAndFileNames.push(newDiary)
  eventsAndFileNames.push(generateDaysNotes)
  eventsAndFileNames.push(cleanupOldNotes)

  const alfredScriptFilterObj = { items: eventsAndFileNames }
  fs.writeFile(`${os.homedir}/Documents/notes/default/diary/alfred.json`, JSON.stringify(alfredScriptFilterObj), (err) => {
    if (err) {
      console.error(err)
    } else {
      console.log(`Wrote alfred script filter to ${os.homedir}/Documents/notes/default/diary/alfred.json`)
    }
  })
})
