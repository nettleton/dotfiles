function vpn
  set PIDFILE $HOME/.openconnect_pid

  set EXISTING_PID ""
  set CMD_AT_PID ""

  if test -e "$PIDFILE"
    set EXISTING_PID (cat -p $HOME/.openconnect_pid)
    set CMD_AT_PID (ps -p $EXISTING_PID -o command | sed -n '2p' | cut -f1 -d' ')
  end

  test "$CMD_AT_PID" = "openconnect"; and set CONNECTION_STATUS "connected"; or set CONNECTION_STATUS "disconnected"

  switch $argv[1]
    case status
      echo "$CONNECTION_STATUS"
    case connect
      if test "$CONNECTION_STATUS" = "disconnected"
        if test -n "$argv[2]"
          set VPN_HOST "$argv[2]"
        else
          set VPN_HOST "zakim.{{ .work.domain }}"
        end

        echo "openconnect requires sudo access to connect, prompting now..."
        if ioreg -r -k AppleClamshellState -d 4 | grep AppleClamshellState | head -1 | grep -iq "No"
          echo "Clamshell state is open, should prompt for biometric"
          sudo -v
        else
          echo "Clamshell state is closed, using password manager"
          op item get "{{ .op.sudoitem }}" --fields password | sudo -S -v
        end
        echo "sudo successful, starting connect"

        op item get {{ .work.companyname }} --fields password | sudo openconnect --user (op item get {{ .work.companyname }} --field username) --setuid (id -u) -b --pid-file "$PIDFILE" --authgroup MFA --passwd-on-stdin "$VPN_HOST"
      else
        echo "already connected, disconnect first"
      end
    case disconnect
      if test "$CONNECTION_STATUS" = "connected"
        kill -9 $EXISTING_PID
      else
        echo "openconnect not running, doing nothing"
      end
    case '*'
      echo "Unrecognized option $argv[1]"
  end
end
