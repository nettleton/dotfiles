set FISH_CONFIG_DIR "$HOME/.config/fish"

# ENV
#SANDBOX
set -g -x SANDBOX "$HOME/sandbox"

#UTILS
set -g -x UTILS "$HOME/utilities"

#DOWNLOAD
set -g -x DOWNLOADS "$HOME/Downloads"

# NOTES
set -g -x NOTES "$HOME/Documents/notes/default"
set -g -x ZK_NOTEBOOK_DIR "$HOME/Library/Mobile Documents/com~apple~CloudDocs/notes/zk/default"

#JAVA
switch (uname)
  case Darwin
    set -g -x JAVA_1_8_HOME (/usr/libexec/java_home -v 1.8)
  case  Linux
    set -g -x JAVA_1_8_HOME (update-alternatives --list javac | grep "8" | sed -e "s:/bin/javac::g")
  case '*'
end
set -g -x JAVA_HOME $JAVA_1_8_HOME
set -g -x MATLAB_JAVA "$JAVA_1_8_HOME/jre"

# GO
set -x GOROOT (go env GOROOT)
{{- if (not (eq .targetname "nessie")) }}
set -x GOPROXY http://iat-go-proxy-prod-01.{{ .work.domain }}:7000/go-proxy
{{- end }}
set -x GOPRIVATE golang.dhcp,github.{{ .work.domain }}
set -x GONOPROXY github.{{ .work.domain }}
set -x MW_USE_LOCAL_GO true
set -x MW_USE_LOCAL_GOLANGCI_LINT true
set -x GOLANGCILINTLOCATION (dirname (which golangci-lint))
{{ if and (eq .chezmoi.os "darwin") (eq .chezmoi.arch "arm64") }}
set -x MW_ARCH "maca64"
{{ end }}

set -g -x EDITOR "nvim"

set -g -x ALTERNATE_EDITOR "/usr/bin/vim"

set -x -g WORK_USER {{ .work.user }}
set -x -g WORK_MAC_DESKTOP {{ .work.hostnames.mac_desktop }}
set -x -g WORK_MAC_STUDIO {{ .work.hostnames.mac_studio }}
set -x -g WORK_MAC_SCREENS_ALIAS {{ .work.user }}-maci
set -x -g WORK_LINUX {{ .work.hostnames.linux }}

# END ENV

# ALIASES / ABBREVIATIONS
abbr h "cd ~"
abbr dl "cd $DOWNLOADS"
abbr doc "cd $HOME/Documents/"
abbr icd "cd $HOME/Library/Mobile\ Documents/com~apple~CloudDocs"
abbr od "cd $HOME/OneDrive\ -\ {{ .work.companyname }}"
abbr n "cd $NOTES"

abbr ...... "cd ../../../../.."
abbr .6     "cd ../../../../.."

abbr p4s "$SANDBOX/dotfiles/git/p4sync.fish"

# MAVEN
abbr m "mvn"
abbr mct "mvn clean test"
abbr mi  "mvn install"
abbr mp  "mvn pre-integration-test"
abbr mcpk "mvn clean package"
abbr mci "mvn clean install"
abbr mcv "mvn clean verify"
abbr mcp "mvn clean pre-integration-test"

abbr l "exa --git --icons -alh"
abbr clc "clear"

abbr deb "vm '$LINUX_VMX'"
abbr win "vm '$WINDOWS_VMX'"

abbr vi "nvim"
abbr e "code"

# KITTY
abbr icat "kitty +kitten icat"
abbr diffk "kitty +kitten diff"

abbr sshk "kitty +kitten ssh"
abbr wm "kitty +kitten ssh -t -p 22 $WORK_USER@$WORK_MAC_STUDIO 'exec fish'"
abbr wms "kitty +kitten ssh -t -p 22 $WORK_USER@$WORK_MAC_STUDIO 'exec fish'"
abbr wmv "open screens://$WORK_MAC_SCREENS_ALIAS"
abbr wl "sshf $WORK_KEY $WORK_USER $WORK_LINUX"

abbr nas "ssh $NAS_IP"

abbr rlc ". $HOME/.config/fish/config.fish"

abbr pr "$SANDBOX/scratch/scripts/pr.sh"

abbr cat "bat --style header,header-filesize,grid"

# https://github.com/cljoly/telescope-repo.nvim/discussions/13
if which glocate > /dev/null
  alias locate="glocate -d $HOME/.cache/locatedb"
  set -x LOCATE_PATH "$HOME/.cache/locatedb"
end
abbr loaddb "gupdatedb --localpaths=$HOME --prunepaths=/Volumes --output=$HOME/.cache/locatedb"

# END ALIASES / ABBREVIATIONS

function sourceIfNecessary
  functions -q "$argv[2]"; or source "$argv[1]"
end

test -s $HOME/.nvm-fish/nvm.fish; and source $HOME/.nvm-fish/nvm.fish

# pyenv init
if command -v pyenv 1>/dev/null 2>&1
  pyenv init - | source
end
