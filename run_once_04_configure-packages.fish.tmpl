#!/usr/bin/env fish
mkdir -p "$HOME/.cache"
touch "$HOME/.cache/locatedb"

mkdir -p "$HOME/sandbox/go/bin"
set -x -U GOPATH "$HOME/sandbox/go"
set -x -U GOBIN "$GOPATH/bin"
echo $fish_user_paths | grep -q "$GOPATH"; or set -U fish_user_paths $fish_user_paths "$GOPATH/bin"

go install github.com/rhysd/vim-startuptime@latest

# internal dev tools are at /usr/local/netbin 
{{ if (contains .chezmoi.username .targetname) }}
if contains /usr/local/netbin $fish_user_paths
  echo "/usr/local/netbin already on path, not adding"
else
  echo "/usr/local/netbin not on path, adding"
  fish_add_path /usr/local/netbin 
end
{{ end }}

vale sync

for npmPkg in npm neovim yo@^4 generator-op-sdk
  echo "checking $npmPkg"
  if not npm list -g "$npmPkg" > /dev/null
    echo "  $npmPkg not installed, installing"
    npm install -g "$npmPkg"
  else
    if not npm outdated -g "$npmPkg" > /dev/null
      echo "  $npmPkg outdated, upgrading"
      npm install -g "$npmPkg"
    end
  end
  echo "  $npmPkg up-to-date"
end

set pylatest (pyenv install --list | grep --extended-regexp "^\s*[0-9][0-9.]*[0-9]\s*\$" | tail -1 | string trim)
if not test -d "$HOME/.pyenv/versions/$pylatest"
  pyenv install "$pylatest"
  pyenv global "$pylatest"

  set -Ux PYENV_ROOT $HOME/.pyenv
  set -Ux PYENV_VERSION "$pylatest"
  echo $fish_user_paths | grep -q "$PYENV_ROOT/bin"; or set -U fish_user_paths $fish_user_paths "$PYENV_ROOT/bin"
end

set pipbin "$HOME/.local/bin"
mkdir -p "$pipbin"
echo $fish_user_paths | grep -q "$pipbin"; or set -U fish_user_paths $fish_user_paths "$pipbin"

pip install --upgrade pip
pip3 install --user --upgrade neovim pynvim

if test (podman machine list --noheading | wc -l) -eq 1
  echo "podman machine installed; not reinstalling"
else
  podman machine init --cpus 6 --disk-size 3072 --memory 8192
end

echo "elevating to sudo to check podman-mac-helper"
op item get "{{ .op.sudoItem }}" --fields password | /usr/bin/sudo -S -v
echo "sudo check complete"
sudo podman-mac-helper install

# symlink docker-compose as docker plugin - podman-compose isn't feature for feature compatible
#    example: https://github.com/containers/podman-compose/issues/610
mkdir -p "$HOME/.docker/cli-plugins"
set HOMEBREW_PREFIX (brew --prefix)
ln -sfn "$HOMEBREW_PREFIX/opt/docker-compose/bin/docker-compose" "$HOME/.docker/cli-plugins/docker-compose"

defaults write com.ameba.SwiftBar StealthMode -bool NO
defaults write com.ameba.SwiftBar DisableBashWrapper -bool NO
defaults write com.ameba.SwiftBar PluginDeveloperMode -bool YES
defaults write com.ameba.Swiftbar PluginDebugMode -bool YES
defaults write com.ameba.SwiftBar Terminal -string "iTerm"
defaults write com.ameba.SwiftBar PluginDirectory -string "$HOME/.config/swiftbar"
defaults write com.ameba.SwiftBar Shell -string "zsh"


gh auth status -h github.{{ .work.domain }} > /dev/null; or gh auth login -h github.{{ .work.domain }} -u {{ .work.user }} -p ssh --skip-ssh-key -w
gh auth status -h github.com > /dev/null; or gh auth login -h github.com -u nettleton -p ssh --skip-ssh-key -w

mkdir -p "$HOME/.cache/whisper"
set WHISPER_GGML_LARGE "$HOME/.cache/whisper/ggml-large-v3-q5_0.bin"
test -f "$WHISPER_GGML_LARGE"; or curl -o "$WHISPER_GGML_LARGE" -L 'https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-large-v3-q5_0.bin?download=true'
set GGML_METAL_LOCATION (find (brew --cellar -q whisper-cpp) -name "ggml-metal.metal")
if test (echo "$GGML_METAL_LOCATION" | wc -l) -eq 1
  set -Ux GGML_METAL_PATH_RESOURCES (dirname "$GGML_METAL_LOCATION")
  echo "Set GGML_METAL_PATH_RESOURCES to $GGML_METAL_PATH_RESOURCES"
else
  echo "Multiple GGML Metal drivers found; not setting"
  echo "$GGML_METAL_LOCATION"
end


echo "execute 'loaddb' in a new shell"
echo "execute ':GoInstallBinaries in nvim"
